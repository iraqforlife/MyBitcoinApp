import { UserService } from './../../services/user.service';
import { Component, computed, Signal, signal } from '@angular/core';
import { setErrorMessage } from '../../utils/error-message';
import { HttpErrorResponse, HttpResourceRef } from '@angular/common/http';
import { MatTableModule } from '@angular/material/table';
import { MatButtonModule } from '@angular/material/button';
import { MatIconModule } from '@angular/material/icon';
import { WalletsService } from '../../services/wallets.service';
import { Wallet } from '../../dto/wallet.dto';
import { MatDialog } from '@angular/material/dialog';
import { AddWalletDialogComponent } from '../add-wallet-dialog/add-wallet-dialog.component';
import { MatSnackBar } from '@angular/material/snack-bar';
import { Wallets, WalletsLabels } from '../../enum/wallets';

@Component({
  selector: 'app-wallets-list',
  imports: [MatTableModule, MatButtonModule, MatIconModule],
  templateUrl: './wallets-list.component.html',
})
export class WalletsListComponent {
  [x: string]: any;
  pageTitle = 'Wallets List';
  WalletsResource: HttpResourceRef<Wallet[] | undefined>;
  constructor(
    private service: WalletsService,
    private userService: UserService,
    private dialog: MatDialog,
    private snackBar: MatSnackBar
  ) {
    this.WalletsResource = this.service.getAll();
  }

  // Resource signals
  wallets: Signal<Wallet[]> = computed(() => {
    const currentWallets = this.WalletsResource?.value() ?? ([] as Wallet[]);
    return this.newWallet()
      ? [...currentWallets, this.newWallet()!]
      : currentWallets;
  });
  newWallet = signal<Wallet | undefined>(undefined);
  error = computed(() => this.WalletsResource.error() as HttpErrorResponse);
  errorMessage = computed(() => setErrorMessage(this.error(), 'vehicle'));
  isLoading = computed(() => this.WalletsResource.isLoading());

  displayedColumns: string[] = ['name', 'type', 'actions'];

  openAddWalletDialog() {
    const dialogRef = this.dialog.open(AddWalletDialogComponent);

    dialogRef.afterClosed().subscribe((result) => {
      if (result) {
        console.log('New wallet added:', result);
        const newWallet: Wallet = {
          name: result.name as string,
          type: Number(result.type), // Ensure type is converted to a number
          id: undefined, // Assuming id is generated by the backend
          userId: this.userService.userId, // Assuming userId is available in the service
        };
        this.service.create(newWallet).subscribe({
          next: (response) => {
            if (response) {
              this.newWallet.set(response);

              this.snackBar.open('Wallet added successfully!', 'Close', {
                duration: 3000,
                verticalPosition: 'bottom',
                horizontalPosition: 'right',
              });
            } else {
              this.snackBar.open('Sum thin wong 2', 'Close', {
                duration: 3000,
                verticalPosition: 'bottom',
                horizontalPosition: 'right',
              });
            }
          },
          error: (err) => {
            this.snackBar.open('Sum thin wong ', 'Close', {
              duration: 3000,
              verticalPosition: 'bottom',
              horizontalPosition: 'right',
            });
          },
        });

        // Add logic to handle the new wallet addition
      }
    });
  }
  getWalletsLabels(type: Wallets): string {
    return WalletsLabels[type] || 'Unknown Type';
  }
}
